{"version":3,"sources":["sample.ts"],"names":["App","App.constructor","App.initCanvas","App.resizeCanvas","App.loadImageIntoCanvas","App.loadSelectedImageHandler","App.insertImageHandler"],"mappings":"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","file":"sample.js","sourcesContent":["/*\r\n * Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n// declare var Office: any;\r\n// declare var OfficeExtension: any;\r\n// declare var Word: any;\r\n\r\nclass App {\r\n\r\n    constructor() { \r\n        // The initialize function is run each time the page is loaded.\r\n        Office.initialize = (reason) => {\r\n            $(document).ready(() => {\r\n                // Use this to check whether the new API is supported in the Word client.\r\n                if (Office.context.requirements.isSetSupported(\"WordApi\", 1.2)) {\r\n\r\n                    console.log('This code is using Word 2016 or greater.');\r\n                    \r\n                    // Setup the event handlers for UI.\r\n                    $('#loadSelectedImage').click(this.loadSelectedImageHandler.bind(this));\r\n                    $('#insertImageAtSelection').click(this.insertImageHandler.bind(this));\r\n\r\n                    // Scale the size of the canvas so that it scales  \r\n                    // when a user resizes the add-in.\r\n                    window.addEventListener('resize', this.resizeCanvas.bind(this), false);\r\n            \r\n                    // Setup the canvas event listener(s).\r\n                    this.initCanvas();\r\n\r\n                } else {\r\n                    // Just letting you know that this code will not work with your version of Word.\r\n                    console.log('This add-in requires Word 2016 or greater. Check your version of Word and the requirement set version.');\r\n                }\r\n            });\r\n        };\r\n    }\r\n\r\n    /*********************/\r\n    /* Globals           */\r\n    /*********************/\r\n\r\n    private _calloutEnabled: boolean = false; // we only want to add callout when an image is loaded.\r\n    private _calloutNumber: number; // set/reset when an image is loaded.\r\n    private _resizeRatio: number; // set when an image has been loaded in to the canvas.\r\n    private _windowWidth: number; // we are setting the canvas width to the window width.\r\n    private _image; // the image added to the canvas.\r\n \r\n    /*********************/\r\n    /* Canvas functions */\r\n    /*********************/\r\n\r\n     \r\n    /**\r\n    * Initialize the canvas with the click event. Click event inserts callouts into the canvas image. \r\n    */\r\n    initCanvas(): void {\r\n\r\n        this._windowWidth = window.innerWidth;\r\n\r\n        var canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n\r\n        var ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        // Add callouts when the user clicks in the canvas.\r\n        ctx.canvas.addEventListener('click', (event) => {\r\n\r\n            // Let's make sure that we have an image loaded before\r\n            // we add callouts to the canvas.\r\n            if (this._calloutEnabled) {\r\n\r\n                // Increment callout number. We will use this later when we stub out\r\n                // descriptions for the callouts by using the Word JS API.\r\n                this._calloutNumber++;\r\n\r\n                // Get the bounds of the canvas element in relationship to the top-left of the viewport.\r\n                // We will get the coordinates in canvas, not the window.\r\n                var canvasBounds = canvas.getBoundingClientRect();\r\n\r\n                // Use the event coordinates, canvas boundaries, and the window width\r\n                // to get the coordinates where the callouts can be placed.\r\n                var height = this._windowWidth * this._resizeRatio;\r\n                var mouseX = (event.clientX - canvasBounds.left) * canvas.width / this._windowWidth;\r\n                var mouseY = (event.clientY - canvasBounds.top) * canvas.height / height;\r\n            \r\n                // Draw circle for the callout.\r\n                var radius = 12;\r\n                ctx.fillStyle = 'red';\r\n                ctx.beginPath();\r\n                ctx.arc(mouseX, mouseY, radius, 0, Math.PI * 2, true);\r\n                ctx.closePath();\r\n                ctx.fill();\r\n\r\n                // Insert the callout number in the circle.\r\n                var width = ctx.measureText(this._calloutNumber.toString());\r\n                ctx.font = 'bold 16px calabri ';\r\n                ctx.fillStyle = 'white';\r\n                ctx.textAlign = 'center';\r\n                ctx.fillText(this._calloutNumber.toString(), mouseX, mouseY + (radius / 3)); // this last argument is approximately correct for placement.\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Changes the canvas size according to the window width and the image aspect ratio. \r\n    */    \r\n    resizeCanvas(): void {\r\n    \r\n        // Canvas must fit width of add-in.\r\n        this._windowWidth = window.innerWidth;\r\n\r\n        // Set the resize ratio only if it hasn't already been captured, \r\n        // and only if there is an image loaded in the add-in.\r\n        if (!this._resizeRatio && this._image)\r\n            this._resizeRatio = this._image.height / this._image.width;\r\n\r\n        // Resize the canvas only if there is an image loaded into it.\r\n        if (this._image) {\r\n            var height = this._windowWidth * this._resizeRatio;\r\n            var canvas = document.getElementById('canvas');\r\n            canvas.style.width = this._windowWidth + 'px';\r\n            canvas.style.height = height + 'px';\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Loads the image into the HTML canvas. loadSelectedImageHandler() checks whether you have an image.\r\n     * @param base64EncodedImage The image to load into the canvas.\r\n     */\r\n    loadImageIntoCanvas(base64EncodedImage): void {\r\n\r\n        // Callouts should only be added once the image is loaded into canvas.\r\n        this._calloutEnabled = false;\r\n        \r\n        // Create an image and load it onto the canvas, set the canvas to the image\r\n        // dimensions, and draw it on the canvas.\r\n        this._image = new Image();\r\n        this._image.onload = () => {\r\n\r\n            var canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n            var ctx = canvas.getContext(\"2d\");\r\n\r\n            canvas.height = this._image.height;\r\n            canvas.width = this._image.width;\r\n            ctx.drawImage(this._image, 0, 0);\r\n         \r\n            // Reset the this._calloutNumber when I load a new image.\r\n            this._calloutNumber = 0;\r\n\r\n            // Enable adding callouts to the canvas.\r\n            this._calloutEnabled = true;\r\n            \r\n            // Make the canvas scale to the window.\r\n            this.resizeCanvas();\r\n        };\r\n\r\n        // ASSUMPTION: we are assuming only png files. You will need to determine file type.\r\n        // Load the image we got from Word.\r\n        this._image.src = \"data:image/png;base64,\" + base64EncodedImage.value;\r\n    }\r\n\r\n    /*********************/\r\n    /* Word JS functions */\r\n    /*********************/\r\n\r\n    /**\r\n    * Load the the selected image from Word into the add-in. This assumes that a single image was selected. \r\n    */\r\n    loadSelectedImageHandler(): void {\r\n        Word.run((context) => {\r\n\r\n            // Create a proxy object for the range that is assumed to contain an image.\r\n            var imageRange = context.document.getSelection() as Word.Range;\r\n\r\n            // Load the selected range.\r\n            context.load(imageRange, 'inlinePictures');\r\n\r\n            // Synchronize the document state by executing the queued commands, \r\n            // and return a promise to indicate task completion.\r\n            return context.sync()\r\n                .then(() => {\r\n                    // If there is more than one inline picture, then we need to tell the user to choose a single picture.\r\n                    if (imageRange.inlinePictures.items.length === 1) {\r\n\r\n                        // Queue a command to get the image source. \r\n                        var imageString = imageRange.inlinePictures.items[0].getBase64ImageSrc();\r\n\r\n                        // Synchronize the document state by executing the queued commands, \r\n                        // and return a promise to indicate task completion.\r\n                        return context.sync().then(() => {\r\n                            this.loadImageIntoCanvas(imageString);\r\n                        });\r\n\r\n                    }\r\n                    // \r\n                    else {\r\n                        throw \"You need to select a single image.\"\r\n                    }\r\n\r\n                });\r\n        })\r\n            .catch((error) => {\r\n                console.log('Error: ' + JSON.stringify(error));\r\n                if (error instanceof OfficeExtension.Error) {\r\n                    console.log('Debug info: ' + JSON.stringify(error.debugInfo));\r\n                }\r\n            });\r\n    }\r\n  \r\n    /**\r\n    * Insert the contents of the canvas into the Word document. \r\n    */\r\n    insertImageHandler(): void {\r\n\r\n        // Only insert the contents of the canvas if we an image in it.\r\n        if (this._image) {\r\n\r\n            var canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n\r\n            // Get the data URL for the image in the canvas. \r\n            var pngDataUrl = canvas.toDataURL(); // data uri scheme\r\n\r\n            // Extract the encoding format information. Word only accepts the base64 content. \r\n            // ASSUMPTION: that this is a png file.\r\n            var base64ImgString = pngDataUrl.replace('data:image/png;base64,', '');\r\n\r\n            Word.run((context) => {\r\n\r\n                // Create a proxy object for the range at the current selection.\r\n                var imageRange = context.document.getSelection() as Word.Range;\r\n\r\n                // Load the selected range.\r\n                context.load(imageRange, 'text');\r\n\r\n                // Synchronize the document state by executing the queued commands, \r\n                // and return a promise to indicate task completion.\r\n                return context.sync()\r\n                    .then(() => {\r\n\r\n                        // Queue a command to insert the image into the document.\r\n                        var insertedImage = imageRange.insertInlinePictureFromBase64(base64ImgString, Word.InsertLocation.replace) as Word.InlinePicture;\r\n\r\n                        // Queue a command to navigate the UI to the insert picture.\r\n                        insertedImage.select();\r\n\r\n                        // Queue an indefinite number of commands to insert paragraphs \r\n                        // based on the number of callouts added to the image. \r\n                        if (this._calloutNumber > 0) {\r\n                            var lastParagraph = insertedImage.insertParagraph('Here are your callout descriptions:', Word.InsertLocation.after) as Word.Paragraph;\r\n\r\n                            for (var i = 0; i < this._calloutNumber; i++) {\r\n                                lastParagraph = lastParagraph.insertParagraph((i + 1) + ') [enter callout description].', Word.InsertLocation.after);\r\n                            }\r\n                        }\r\n                    })\r\n                    // Synchronize the document state by executing the queued commands.\r\n                    .then(context.sync);\r\n            })\r\n                .catch((error) => {\r\n                    console.log('Error: ' + JSON.stringify(error));\r\n                    if (error instanceof OfficeExtension.Error) {\r\n                        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\r\n                    }\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\nvar app = new App();"],"sourceRoot":"/source/"}